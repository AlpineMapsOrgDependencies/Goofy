name: "webassembly"
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: mymindstorm/setup-emsdk@v13
      with:
        version: 3.1.37
    - uses: actions/checkout@v3
    - name: Install Qt native version (required by webassembly version)
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.6.1'
        host: linux
        target: 'desktop'
        arch: gcc_64
        dir: '${{github.workspace}}/qt'
        install-deps: 'true'

    - name: Set QT_HOST_PATH
      run: echo "QT_HOST_PATH=${Qt6_DIR}" >> "$GITHUB_ENV"

    - name: Install Linux Dependencies
      run: sudo apt-get install -y build-essential ninja-build

    - name: Install Qt Webassembly version
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.6.1'
        host: linux
        target: 'desktop'
        arch: wasm_singlethread
        dir: '${{github.workspace}}/qt'
        install-deps: 'true'

    - name: Verify emcc
      run: emcc -v

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "install-dir=${{ github.workspace }}/install" >> "$GITHUB_OUTPUT"

    - name: env
      env:
        CMAKE_PREFIX_PATH: ${{env.Qt6_DIR}}/lib/cmake
      run: |
        env
        ls -l ${Qt6_DIR}/bin/
        chmod u+x ${Qt6_DIR}/bin/*

    - name: Configure CMake
      env:
        CMAKE_PREFIX_PATH: ${{env.Qt6_DIR}}/lib/cmake
      run: >
        ${Qt6_DIR}/bin/qt-cmake
        -G Ninja
        -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=Release
        -DAA_ENABLE_LONG_TEST_RUN=OFF
        -DAA_WWW_INSTALL_DIR=${{ steps.strings.outputs.install-dir }}
        -DFMT_INSTALL=OFF
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --target install --config Release

    - name: Create artifact
      uses: actions/upload-artifact@v4
      with:
        name: webassembly_tests
        path: ${{ steps.strings.outputs.install-dir }}
        if-no-files-found: error
