name: "webassembly"
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: mymindstorm/setup-emsdk@v13
    - uses: actions/checkout@v3
    - uses: wasmerio/setup-wasmer@v2

    - name: Verify wasmtime
      run: emcc -v

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        emcmake cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=emcc
        -DCMAKE_C_COMPILER=emcc
        -DCMAKE_BUILD_TYPE=Release
        -DENABLE_ADDRESS_SANITIZER=ON
        -DENABLE_LONG_TEST_RUN=OFF
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Test on Linux
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{ github.workspace }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: wasmer run  ${{ steps.strings.outputs.build-output-dir }}/bin/GoofyTC.wasm -- 0 0
