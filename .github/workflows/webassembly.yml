name: "webassembly"
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Setup wasi sdk
      run: |
        export WASI_VERSION=21
        export WASI_VERSION_FULL=${WASI_VERSION}.0
        wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz
        tar xvf wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz
        echo "WASI_SDK_PATH=`pwd`/wasi-sdk-${WASI_VERSION_FULL} >> "$GITHUB_OUTPUT"
    - uses: actions/checkout@v3
    - uses: bytecodealliance/actions/wasmtime/setup@v1

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: test wasi
      run: |
        echo ${{ steps.strings.outputs.build-output-dir }}
        echo ${{ steps.strings.outputs.WASI_SDK_PATH }}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_TOOLCHAIN_FILE=${{ steps.strings.outputs.WASI_SDK_PATH }}/share/cmake/wasi-sdk.cmake
        -DCMAKE_BUILD_TYPE=Release
        -DENABLE_ADDRESS_SANITIZER=ON
        -DENABLE_LONG_TEST_RUN=OFF
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Test on Linux
      working-directory: ${{ github.workspace }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        wasmtime --dir=${{ github.workspace }}::/ ${{ steps.strings.outputs.build-output-dir }}/bin/GoofyTC.wasm
