name: "webassembly"
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: mymindstorm/setup-emsdk@v13
    - uses: actions/checkout@v3
    - uses: bytecodealliance/actions/wasmtime/setup@v1
    - name: Install Qt native version (required by webassembly version)
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.6.1'
        host: linux
        target: 'desktop'
        arch: gcc_64
        dir: '${{github.workspace}}/qt'
        install-deps: 'true'

    - name: Install Linux Dependencies
      run: sudo apt-get install -y build-essential ninja-build

    - name: Install Qt Webassembly version
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.6.1'
        host: linux
        target: 'desktop'
        arch: wasm_singlethread
        dir: '${{github.workspace}}/qt'
        install-deps: 'true'

    - name: Verify emcc
      run: emcc -v

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: env
      env:
        CMAKE_PREFIX_PATH: ${{env.Qt6_DIR}}/lib/cmake
      run: |
        env
        which qt-cmake

    - name: Configure CMake
      env:
        CMAKE_PREFIX_PATH: ${{env.Qt6_DIR}}/lib/cmake
      run: >
        qt-cmake
        -G Ninja
        -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_CXX_COMPILER=emcc
        -DCMAKE_C_COMPILER=emcc
        -DENABLE_ADDRESS_SANITIZER=ON
        -DENABLE_LONG_TEST_RUN=OFF
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Test on Linux
      working-directory: ${{ github.workspace }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        wasmtime ${{ steps.strings.outputs.build-output-dir }}/bin/GoofyTC.wasm
